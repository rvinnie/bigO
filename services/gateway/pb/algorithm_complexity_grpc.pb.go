// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: algorithm_complexity.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlgorithmComplexity_CountComplexity_FullMethodName = "/gateway.AlgorithmComplexity/CountComplexity"
)

// AlgorithmComplexityClient is the client API for AlgorithmComplexity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlgorithmComplexityClient interface {
	CountComplexity(ctx context.Context, in *CalculateComplexityRequest, opts ...grpc.CallOption) (*CalculateComplexityResponse, error)
}

type algorithmComplexityClient struct {
	cc grpc.ClientConnInterface
}

func NewAlgorithmComplexityClient(cc grpc.ClientConnInterface) AlgorithmComplexityClient {
	return &algorithmComplexityClient{cc}
}

func (c *algorithmComplexityClient) CountComplexity(ctx context.Context, in *CalculateComplexityRequest, opts ...grpc.CallOption) (*CalculateComplexityResponse, error) {
	out := new(CalculateComplexityResponse)
	err := c.cc.Invoke(ctx, AlgorithmComplexity_CountComplexity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlgorithmComplexityServer is the server API for AlgorithmComplexity service.
// All implementations must embed UnimplementedAlgorithmComplexityServer
// for forward compatibility
type AlgorithmComplexityServer interface {
	CountComplexity(context.Context, *CalculateComplexityRequest) (*CalculateComplexityResponse, error)
	mustEmbedUnimplementedAlgorithmComplexityServer()
}

// UnimplementedAlgorithmComplexityServer must be embedded to have forward compatible implementations.
type UnimplementedAlgorithmComplexityServer struct {
}

func (UnimplementedAlgorithmComplexityServer) CountComplexity(context.Context, *CalculateComplexityRequest) (*CalculateComplexityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountComplexity not implemented")
}
func (UnimplementedAlgorithmComplexityServer) mustEmbedUnimplementedAlgorithmComplexityServer() {}

// UnsafeAlgorithmComplexityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlgorithmComplexityServer will
// result in compilation errors.
type UnsafeAlgorithmComplexityServer interface {
	mustEmbedUnimplementedAlgorithmComplexityServer()
}

func RegisterAlgorithmComplexityServer(s grpc.ServiceRegistrar, srv AlgorithmComplexityServer) {
	s.RegisterService(&AlgorithmComplexity_ServiceDesc, srv)
}

func _AlgorithmComplexity_CountComplexity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateComplexityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgorithmComplexityServer).CountComplexity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlgorithmComplexity_CountComplexity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgorithmComplexityServer).CountComplexity(ctx, req.(*CalculateComplexityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlgorithmComplexity_ServiceDesc is the grpc.ServiceDesc for AlgorithmComplexity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlgorithmComplexity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.AlgorithmComplexity",
	HandlerType: (*AlgorithmComplexityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountComplexity",
			Handler:    _AlgorithmComplexity_CountComplexity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "algorithm_complexity.proto",
}
